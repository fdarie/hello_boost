name: Build with CMake User Presets

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [release]  # Lowercase to match CMake presets
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          if [ "$(uname)" = "Linux" ]; then
            sudo apt update && sudo apt install -y build-essential python3-pip apt-transport-https ca-certificates gnupg software-properties-common
            sudo apt remove --purge --yes cmake || true
            sudo mkdir -p /etc/apt/keyrings
            curl -fsSL https://apt.kitware.com/keys/kitware-archive-latest.asc | sudo gpg --dearmor -o /etc/apt/keyrings/kitware-archive-keyring.gpg
            echo "deb [signed-by=/etc/apt/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null
            sudo apt update && sudo apt install -y cmake
          else
            brew install cmake
          fi
          pip3 install conan --break-system-packages || pip3 install --user conan

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
          pip install conan

      - name: Create Conan profile
        run: conan profile detect --force

      - name: Install Conan dependencies (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          if [ "${{ matrix.build_type }}" == "debug" ]; then
            conan install . --build=missing -s build_type=Debug --output-folder=out/build/conan-debug
          else
            conan install . --build=missing -s build_type=Release --output-folder=out/build/conan-release
          fi

      - name: Install Conan dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          if ($env:matrix_build_type -eq 'debug') {
            conan install . --build=missing -s build_type=Debug --output-folder=out/build/conan-debug
          } else {
            conan install . --build=missing -s build_type=Release --output-folder=out/build/conan-release
          }

      - name: Build (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cd out/build/conan-${{ matrix.build_type }}
          cmake ../../../ --preset conan-${{ matrix.build_type }}
          cmake --build .

      - name: Build (Windows)
        if: runner.os == 'Windows'
        run: |
          cd out\build\conan-${{ matrix.build_type }}
          cmake ..\..\..\ --preset conan-${{ matrix.build_type }}
          cmake --build .
          dir /s
  
      - name: Upload hello_boost binary (Linux/macOS)
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: hello_boost-${{ matrix.os }}-${{ matrix.build_type }}
          path: out/build/conan-${{ matrix.build_type }}/hello_boost*

      - name: Upload hello_boost binary (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: hello_boost-${{ matrix.os }}-${{ matrix.build_type }}
          path: |
            out\build\conan-${{ matrix.build_type }}\${{ matrix.build_type == 'debug' && 'Debug' || 'Release' }}\hello_boost.exe